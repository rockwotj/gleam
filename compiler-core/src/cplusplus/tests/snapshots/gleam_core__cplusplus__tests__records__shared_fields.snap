---
source: compiler-core/src/cplusplus/tests/records.rs
expression: "\npub type Animal {\n  Cat(name: String, likes_milk: Bool)\n  Dog(name: String, barks: Bool)\n}\n\npub fn make_german_shepard(name) {\n  let barks = True;\n  Dog(name, barks)\n}\n"
---
#ifndef MY_PACKAGE_MY_MODULE_H_
#define MY_PACKAGE_MY_MODULE_H_

#include <gleam.h>

namespace my {
namespace module {

struct Animal;
struct Animal$Cat;
struct Animal$Dog;

gleam::Ref<::my::module::Animal> make_german_shepard(gleam::String name);

struct Animal {
  explicit Animal(gleam::String name) : name(name) {}
  virtual ~Animal() = default;
  gleam::String name;
};

struct Cat$Animal : public Animal {
  explicit Cat$Animal(gleam::String name, bool likes_milk) : Animal(name), likes_milk(likes_milk) {}
  
  bool likes_milk;
};

struct Dog$Animal : public Animal {
  explicit Dog$Animal(gleam::String name, bool barks) : Animal(name), barks(barks) {}
  
  bool barks;
};

} // namespace my
} // namespace module

#endif // MY_PACKAGE_MY_MODULE_H_

---
#include "module.h"

namespace my {
namespace module {

gleam::Ref<::my::module::Animal> make_german_shepard(gleam::String name) {
  bool barks = true;
  return gleam::MakeRef<::my::module::Animal$Dog>(name, barks);
};

} // namespace my
} // namespace module

