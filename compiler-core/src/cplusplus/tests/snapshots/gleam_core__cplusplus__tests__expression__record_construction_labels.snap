---
source: compiler-core/src/cplusplus/tests/expression.rs
expression: "\npub type Person {\n  Person(name: String, age: Int)\n}\n\npub fn increment(n: Int) -> Int {\n  n + 1\n}\n\npub fn birthday(person: Person) -> Person {\n  let next_age = increment(person.age);\n  Person(age: next_age, name: person.name)\n}\n    "
---
#ifndef MY_PACKAGE_MY_MODULE_H_
#define MY_PACKAGE_MY_MODULE_H_

#include <gleam.h>

namespace my {
namespace module {

struct Person;
struct Person$Person;

int64_t increment(int64_t n);

gleam::Ref<::my::module::Person> birthday(gleam::Ref<::my::module::Person> person);

struct Person {
  explicit Person(gleam::String name, int64_t age) : name(name), age(age) {}
  virtual ~Person() = default;
  gleam::String name;
  int64_t age;
};

struct Person$Person : public Person {
  explicit Person$Person(gleam::String name, int64_t age) : Person(name, age) {}
  
  
};

} // namespace my
} // namespace module

#endif // MY_PACKAGE_MY_MODULE_H_

---
#include "module.h"

namespace my {
namespace module {

int64_t increment(int64_t n) {
  return n + 1;
};

gleam::Ref<::my::module::Person> birthday(gleam::Ref<::my::module::Person> person) {
  int64_t next_age = ::my::module::increment(person->age);
  return gleam::MakeRef<::my::module::Person$Person>(person->name, next_age);
};

} // namespace my
} // namespace module

